#!/usr/bin/env ucode

'use strict';

import * as unetmsg from 'unetmsg.client';
import * as libubus from 'ubus';
import * as uloop from 'uloop';

let chan;
let active = {};

uloop.init();
let ubus = libubus.connect();

chan = unetmsg.open(ubus);
chan.subscribe('wifi-dyn', (req) => {
		recv_remote_rrm_nr(req.args.host, req.args.data.rrm_nr);
	}, () => {	   
		warn(`Server list changed\n`);
	});

chan.publish('wifi-dyn', (req) => {
	let data = req.args;
	switch (data.type) {
	case 'rrm_nr':
		return {};
	case 'assoc_list':
		return {}; 
	}
	return 0;
});

function procd_data() {
	const wireless_status = ubus.call('network.wireless', 'status');
	if (!wireless_status)
		return libubus.STATUS_NOT_SUPPORTED;

	let data = {};
	for (let radio, v in wireless_status) {
		if (!v.up)
			continue;
		for (let network, config in active) {
			for (let band in config.bands) {
				if (!(band == v.config.band || band in v.config.band))
					continue;
				data[radio] ??= {};
				data[radio][config.config.ssid] = {
					device: radio,
					config: config.config,
				}
			}
		}
	}
	ubus.call('service', 'set', {
		name: 'uconfig-server',
		data: { 'wifi-iface': data }
	});

	ubus.call('network', 'reload');

	return libubus.STATUS_OK;
}

function timer_expired_cb() {
	for (let name, network in active) {
		if (!network.timer)
			continue;
		if (network.timer.remaining() > 0)
			continue;
		delete active[name];
		procd_data();
	}
}

let ubus_methods = {
	add: {
		call: function(req) {
			if (active[req.args.network])
				return libubus.STATUS_PERMISSION_DENIED;

			for (let k in [ 'network', 'ssid', 'key', 'encryption', 'bands' ])
				if (!req.args[k])
					return libubus.STATUS_INVALID_ARGUMENT;

			const key_length = length(req.args.key);
			if (key_length < 8 || key_length > 63)
				return libubus.STATUS_INVALID_ARGUMENT;

			const ssid_length = length(req.args.ssid);
			if (ssid_length < 1 || ssid_length > 32)
				return libubus.STATUS_INVALID_ARGUMENT;

			const network_status = ubus.call('network.interface.' + req.args.network, 'status');
			if (!network_status)
				return libubus.STATUS_INVALID_ARGUMENT;
	
	       		active[req.args.network] = {
				bands: req.args.bands,
				config : {
					mode: 'ap',
					ssid: req.args.ssid,
					network: [ req.args.network ],
					encryption: req.args.encryption,
					key: req.args.key,
				},
			};

			if (req.args.timeout)
				active[req.args.network].timer = uloop.timer(req.args.timeout * 1000, timer_expired_cb);

			return procd_data();
		},
		args: {
			bands: [ '2g', '5g' ],
			network: 'lan',
			ssid: 'wifi-dynamic',
			key: '00000000',
			encryption: 'sae',
			timeout: 60
		}
	},

	remove: {
		call: function(req) {
			if (!active[req.args.network])
				return libubus.STATUS_NOT_FOUND;
			delete active[req.args.network];

			return procd_data();
		},
		args: {
			network: 'guest',
		},
	},

	update: {
		call: function(req) {
			if (!active[req.args.network])
				return libubus.STATUS_NOT_FOUND;

			if (!req.args.timeout || !active[req.args.network].timer)			
				return libubus.STATUS_INVALID_ARGUMENT;

			active[req.args.network].timer.set(req.args.timeout * 1000);

			return libubus.STATUS_OK;
		},
		args: {
			network: 'guest',
			timeout: 60,
		},
	},

	status: {
		call: function(req) {
			let ret = {
				network: req.args.network,
				active: false,
			};
			
			let network = active[req.args.network];
			if (network) {
				ret.active = true;
				if (network.timer)
					ret.remaining = network.timer.remaining() / 1000;
			}

			return ret;
		},
		args: {
			network: 'guest',
		},
	},

	dump: {
		call: function(req) {
			return active;
		},
		args: {},
	}
};
ubus.publish('wifi-dyn', ubus_methods);

uloop.run();
