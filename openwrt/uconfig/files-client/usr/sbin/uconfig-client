#!/usr/bin/env ucode

'use strict';

import * as unetmsg from 'unetmsg.client';
import * as libubus from 'ubus';
import * as uloop from 'uloop';
import * as fs from 'fs';

uloop.init();
let ubus = libubus.connect();

function config_store(data) {
	let unet = ubus.call('unetd', 'network_get');
	let config = fs.readfile('/etc/uconfig/webui/webui-managed.json');
	config = json(config);
	config.unit.hostname = unet.networks.unet.local_host;
	for (let k, v in data.unit)
		config.unit[k] = v;
	for (let k, v in data.main)
		config.interfaces.main[k] = v;
	for (let k, v in data.guest)
		config.interfaces.guest[k] = v;
	config.uuid = data.uuid;
	if (data.ssh?.['authorized-keys']) {
		config.services.ssh = {
			port: 22, 
			'password-authentication': false,
			'authorized-keys': data.ssh['authorized-keys'],
		}
	}
	config.services.mdns = {
		'additional-hostnames': [ config.unit.hostname ],
	};
	fs.writefile('/tmp/uconfig.pending', config);

	return system('uconfig_apply -t /tmp/uconfig.pending') == 0;
}

function config_apply() {
	uloop.timer(5000, () => {
		system('uconfig_apply -u /tmp/uconfig.pending');
	});
	return { ok: true };
}

function config_push(data) {
	let active = fs.readfile('/etc/uconfig/configs/uconfig.active');
	if (active)
		active = json(active);
	if (!active || active.uuid == data.uuid)
		return false;
	config_store(data);
	config_apply();
	return true;
}

let chan = unetmsg.open(ubus);
chan.publish('uconfig', (req) => {
	let data = req.args;
	switch (data.type) {
	case 'info':
		let system = ubus.call('system', 'info');
		let board = ubus.call('system', 'board');
		
		let info = {
			uptime: system.uptime
		};

		for (let key in [ 'model', 'board_name', ])
			info[key] = board[key];
		for (let key in [ 'revision', 'builddate', ])
			info[key] = board.release[key];
		for (let key in [ 'total', 'free', ])
			info[key] = system.memory[key];
		info.ports = ubus.call('state', 'ports');
		let thermal = fs.readfile('/sys/class/hwmon/hwmon0/temp1_input');
		if (thermal)
			info.thermal = +thermal / 1000;
		return { info };
	case 'config-store':
		return { validate: config_store(data.data) };
	case 'config-apply':
		return config_apply();
	case 'config-push':
		return { update: config_push(data.data) };
	default:
		warn(`unknown command ${data.type} ${data.data}\n`);
		break;
	}
	return 0;
});

chan.subscribe('uconfig', (req) => {
	let data = req.args;
	switch(data.type) {
	case 'reboot':
		system('(/etc/init.d/unetd stop; sleep 2; reboot)&');
		while(true) { }
		break;
	}
});

uloop.run();
