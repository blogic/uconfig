#!/usr/bin/ucode

'use strict';

import * as libubus from 'ubus';
import * as libuci from 'uci';
import * as uloop from 'uloop';
import * as nl80211 from 'nl80211';
import * as rtnl from 'rtnl';
import * as fs from 'fs';

let capab = {};
let capabfile = fs.open("/etc/uconfig/capabilities.json", "r");
if (capabfile) {
	capab = json(capabfile.read("all"));
	capabfile.close();
}

uloop.init();

let ubus = libubus.connect();
let uci = libuci.cursor();
uci.load('network');

let hostapd = {};
let hapd_subscriber;
let log_subscriber;
let dnsmasq_subscriber;
let ratelimit = false;
let wan_ports = uci.get('network', '@wan_ports[0]', 'port');;
let carrier = {};
let events = [];
let event_count = 0;;
let ubus_event;

function event(object, verb, payload) {
	printf('event -> %s.%s %J\n', object, verb, payload);
	let event = { object, verb, time: time(), ...payload };
	push(events, event);
	if (event_count >= 100)
		shift(events);
	else
		event_count++;

	if (ubus_event)
		ubus_event.notify('event', event);
}

let handlers;
handlers = {
	'sta-authorized': function(notify, hapd) {
		let driver = {
			nl80211: 'wireless',
			wired: 'wired',
		};
		let msg = {
			medium: driver[hapd.driver] || 'unknown',
			mac: notify.data.address
		};
		for (let key in [ 'ssid', 'bssid', 'ifname', 'channel', 'band', 'rate-limit' ])
			if (exists(hapd, key))
				msg[key] = hapd[key];
		for (let key in [ 'rate-limit', 'vlan' ])
			if (exists(notify.data, key))
				msg[key] = notify.data[key];

		event('client', 'join', msg);
		
		if (ratelimit) {
			msg = {
				device: (() => {
					if (('vlan' in notify.data) && notify.data.vlan != 0)
						return notify.data.ifname + "-v" + notify.data.vlan;
					else
						return notify.data.ifname;
				})(),
				address: notify.data.address,
			};
			if (notify.data['rate-limit']) {
				msg.rate_ingress = `${notify.data['rate-limit'][0]}`;
				msg.rate_egress = `${notify.data['rate-limit'][1]}`;
			} else
				msg.defaults = hapd.ssid;
			ubus.call('ratelimit', 'client_set', msg);
		}
	},

	disassoc: function(notify, hapd) {
		if (ratelimit) {
			let msg = {
				address: notify.data.address,
				device: hapd.ifname,
			};
			ubus.call('ratelimit', 'client_delete', msg);
		}
	},

	'key-mismatch': function(notify, hapd) {
		event('client', 'key-mismatch', {
			client: notify.data.address,
			ssid: hapd.ssid,
			bssid: hapd.bssid,
		});
	}, 
	
	'channel-switch': function(notify, hapd) {
		event('wifi', 'channel-switch', notify.data);
	}, 

	vlan_add: function(notify) {
		for (let wan in wan_ports) {
			let msg = {
				name: wan,
				vlan: [ `${notify.data.vlan_id}:t` ]
			};
			ubus.call('network.interface.wan_none', 'add_device', msg);
			ubus.call('udevstats', 'add_device', { device: wan, vlan: +notify.data.vlan_id });
		}

		let msg = {
			name: notify.data.ifname,
			'link-ext': true,
			vlan: [ `${notify.data.vlan_id}:u` ]
		};
		ubus.call('network.interface.wan_none', 'add_device', msg);
	},

	vlan_remove: function(notify) {
		if (ratelimit) {
			let msg = {
				device: notify.data.ifname,
			};
			ubus.call('ratelimit', 'device_delete', msg);
		}
	},
};


function hapd_subscriber_notify_cb(notify) {
	if (notify.type == 'probe')
		return 0;
	let handler = handlers[notify.type];
	printf('hapd event -> %s %J\n', notify.type, notify.data);
	if (!handler)
		return 0;
	let hapd = hostapd[notify.data.ifname];
	handler(notify, hapd);

	return 0;
}

function hostapd_event(ifname, type) {
	let payload = {};
	if (!(ifname in hostapd) || wildcard(ifname, 'eth*'))
		return;
	for (let p in [ 'ssid', 'bssid', 'channel', 'band' ])
		payload[p] = hostapd[ifname][p];

	event('wifi', type, payload);
}

function hostapd_add(path, obj) {
	let ifname = obj[1];

	hostapd[ifname] = ubus.call(path, 'get_status');
	hostapd[ifname].ifname = ifname;
	hostapd[ifname].path = path;

	if (hostapd[ifname].op_class >= 81 &&
	    hostapd[ifname].op_class <= 84)
		hostapd[ifname].band = '2G';

	else if (hostapd[ifname].op_class >= 115 &&
		 hostapd[ifname].op_class <= 130)
		hostapd[ifname].band = '5G';

	else if (hostapd[ifname].op_class >= 133 &&
		 hostapd[ifname].op_class <= 136)
		hostapd[ifname].band = '6G';

	else
		hostapd[ifname].band = 'unknown';

	hostapd_event(ifname, 'start');

	printf('adding %s\n', path);
	hapd_subscriber.subscribe(path);
}

function hostapd_remove(path, obj) {
	let ifname = obj[1];
	hostapd_event(ifname, 'stop');
	printf('removing %s\n', path);
	delete hostapd[ifname];
	if (ratelimit) {
		let msg = {
			device: ifname,
		};
		ubus.call('ratelimit', 'device_delete', msg);
	}
}

function hapd_subscriber_remove_cb(remove) {
	printf('remove: %.J\n', remove);
}

function log_subscriber_notify_cb(notify) {
	let msg = split(notify.data.msg, ': ', 2);
	let daemon = split(msg[0], '[')[0];

	switch(daemon) {
	case 'dropbear':
		event('ssh', 'event',  { msg: msg[1] });
		break;
	}
}

function log_subscriber_remove_cb(remove) {
	printf('log remove: %.J\n', remove);
}

function dnsmasq_subscriber_notify_cb(notify) {
	let msg = split(notify.type, '.');
	if (msg[0] != 'dhcp')
		return;
	event(msg[0], msg[1], notify.data);
}

function dnsmasq_subscriber_remove_cb(remove) {
	printf('dnsmasq remove: %.J\n', remove);
}

function unsub_object(add, id, path) {
	let object = split(path, '.');

	switch (path) {
	case 'ratelimit':
		ratelimit = add;
		break;
	case 'log':
		printf('adding %s\n', path);
		log_subscriber.subscribe(path);
		break;
	case 'dnsmasq':
		printf('adding %s\n', path);
		dnsmasq_subscriber.subscribe(path);
		break;
	}
	if (object[0] == 'hostapd' && object[1]) {
		if (add)
			hostapd_add(path, object);
		else
			hostapd_remove(path, object);
	}
}

function listener_cb(event, payload) {
	unsub_object(event == 'ubus.object.add', payload.id, payload.path);
}

function nl_cb(msg) {
	let mac = msg.msg.mac;
	let sinfo = msg.msg.sta_info;
	let payload = {
		mac,
		tx_bytes: sinfo.tx_bytes64,
		rx_bytes: sinfo.rx_bytes64,
		tx_packets: sinfo.tx_packets,
		rx_packets: sinfo.rx_packets,
		connected_time: sinfo.connected_time,
	};
	event('client', 'leave',  payload);
}

function ifname_lookup(prefix, ifname, list) {
	let idx = index(list, ifname);
	if (idx < 0)
		return;
	return prefix + ((length(list) > 1) ? (idx + 1) : '');
}

function rtnl_cb(msg) {
	if (!exists(msg.msg, "carrier"))
		return;

	let name = ifname_lookup('LAN', msg.msg?.ifname, capab.network?.lan);
	if (!name)
		name = ifname_lookup('WAN', msg.msg?.ifname, capab.network?.wan);
	if (name) {
		let verb = msg.msg.carrier ? 'up' : 'down';	
		if (carrier[name] == verb)
			return;
		carrier[name] = verb;
		event('carrier', verb, { name });
	}
}

let ubus_methods = {
	event: {
		call: function(req) {
			if (!req.args.object || !req.args.payload)
				return ubus.STATUS_INVALID_ARGUMENT;

			event(req.args.object, req.args.verb, req.args.payload);
			return 0;
		},
		args: {
			object:"",
			verb:"",
			payload:{},
		}
	},

	log: {
		call: function(req) {
			return { log: events };
		},
		args: {

		}
	},

	reload: {
		call: function(req) {
			config_load();
		},
		args: {

		}
	},
};

hapd_subscriber = ubus.subscriber(hapd_subscriber_notify_cb, hapd_subscriber_remove_cb);
log_subscriber = ubus.subscriber(log_subscriber_notify_cb, log_subscriber_remove_cb);
dnsmasq_subscriber = ubus.subscriber(dnsmasq_subscriber_notify_cb, dnsmasq_subscriber_remove_cb);

let list = ubus.list();
for (let k, path in list)
	unsub_object(true, 0, path);

ubus.listener('ubus.object.add', listener_cb);
ubus.listener('ubus.object.remove', listener_cb);

ubus_event = ubus.publish("event", ubus_methods);

nl80211.listener(nl_cb, [ nl80211.const.NL80211_CMD_DEL_STATION ]);
rtnl.listener(rtnl_cb, null, [ rtnl.const.RTNLGRP_LINK ]);

uloop.run();
uloop.done();
