#!/usr/bin/ucode

'use strict';

import * as datamodel from 'cli.datamodel';
import { readfile, writefile, glob, popen } from 'fs';
import * as nl80211 from 'nl80211';
import * as libubus from 'ubus';
import * as uloop from 'uloop';
import * as rtnl from 'rtnl';

let ubus = libubus.connect();
let pending = false;
let l3_devices;
let capabilities = json(readfile('/etc/uconfig/capabilities.json'));

let model = datamodel.new();
model.add_modules();
model.init();
let cli = model.context();
cli = cli.select([ 'uconfig' ]);
let fingerprints = {};
let wan_traffic = {
	up: [],
	down: []
};

let devices_db = {};

function check_mac(mac) {
	mac = lc(mac);
	return (match(mac, /33:33:.*/) || match(mac, /01:00:5e.*/) || match(mac, /ff:ff:ff.*/));
}

function traffic() {
	let status = ubus.call('network.device', 'status');
	let statistics = status['br-wan']?.statistics;

	if (!statistics)
		return;

	if (wan_traffic.tx_bytes) {
		push(wan_traffic.up, statistics.tx_bytes - wan_traffic.tx_bytes);
		shift(wan_traffic.up);
	}
	if (wan_traffic.rx_bytes) {
		push(wan_traffic.down, statistics.rx_bytes - wan_traffic.rx_bytes);
		shift(wan_traffic.down);
	}

	wan_traffic.tx_bytes = statistics.tx_bytes;
	wan_traffic.rx_bytes = statistics.rx_bytes;
}

function arp_discover() {
	let cache = rtnl.request(rtnl.const.RTM_GETNEIGH, rtnl.const.NLM_F_DUMP, {});
	for (let arp in cache) {
		if (arp.dev == 'lo')
			continue;
		if (check_mac(arp.lladdr))
			continue;
		if (arp.state == rtnl.const.REACHABLE)
			continue;
		rtnl.request(rtnl.const.RTM_NEWNEIGH,
			     rtnl.const.NLM_F_CREATE | rtnl.const.NLM_F_REPLACE,
			     { dev: arp.dev, state: rtnl.const.NUD_INCOMPLETE,
			       flags: rtnl.const.NTF_USE, family: arp.family,
			       dst: arp.dst }); 
	}
	sleep(2000);
}

function freq2channel(freq) {
	if (freq == 2484)
		return 14;
	else if (freq < 1000)
		return (freq - 900) / 2;
	else if (freq > 2400 && freq < 2484)
		return (freq - 2407) / 5;
	else if (freq >= 4910 && freq <= 4980)
		return (freq - 4000) / 5;
	else if(freq >= 56160 + 2160 * 1 && freq <= 56160 + 2160 * 6)
		return (freq - 56160) / 2160;
	else if (freq >= 5955 && freq <= 7115)
		return (freq - 5950) / 5;
	else
		return (freq - 5000) / 5;
}

let bandwidths = {
	'2g': {
		'20': [ '1', '5', '9', '13' ],
		'40': [ '1', '9' ],
	},
	'5g': {
		'40': [ '36', '44', '52', '60', '100', '108',
			'116', '124', '132', '140', '149', '157', '165', '173',
			'184', '192' ],
		'80': [ '36', '52', '100', '116', '132', '149' ],
		'160': [ '36', '100' ],
	}
};

function radios() {
	let status = ubus.call('network.wireless', 'status');
	let wifi = {};
	for (let name, data in status) {
		let radio = {
			htmode: data.config.htmode,
			channel: data.config.channel,
		};
		let modes = { HT: /HT.*/, VHT: /VHT.*/, HE: /HE.*/, EHT: /EHT.*/, };
		for (let mode, mask in modes)
			if (match(data.config.htmode, mask))
				radio.mode = mode;
		if (radio.mode)
			radio.bandwidth = replace(data.config.htmode, radio.mode, '');
		for (let iface in data.interfaces) {
			if (iface.config.mode != 'ap')
				continue;
			let hapd = ubus.call(`hostapd.${iface.ifname}`, 'get_status');
			if (hapd.status != 'ENABLED')
				continue;
			radio.active_channel = '' + hapd.channel;
			radio.freq = hapd.freq;
			radio.utilization = hapd.airtime?.utilization;
			radio.bandwidths = [];
			for (let k, wifi in capabilities.wifi)
				if (wifi.phy == hapd.phy)
					for (let bandwidth in [ 20, 40, 80, 160, 320 ])
						if (bandwidth <= wifi.bands[uc(data.config.band)].max_width)
							push(radio.bandwidths, '' + bandwidth);
			let channels = [];
			let phy = nl80211.request(nl80211.const.NL80211_CMD_GET_WIPHY, nl80211.const.NLM_F_DUMP, { split_wiphy_dump: true, wiphy: +substr(hapd.phy, 3, 1) });
			for (let band in phy.wiphy_bands) {												 
				for (let freq in band?.freqs) {									     
					if (freq.disabled)										  
						continue;
					push(channels, '' + freq2channel(freq.freq));
					/*
					radio.channels[freq2channel(freq.freq)] = {
						freq: freq.freq,
					};
					if (freq.radar)
						channels[freq2channel(freq.freq)].radar = true
					*/
				}
			}
			radio.channels = { 'b20': channels };
			for (let k, bw in radio.bandwidths) {
				if (!bandwidths[data.config.band][bw])
					continue;
				radio.channels['b' + bw] = [];
				for (let l, chan in bandwidths[data.config.band][bw])
					if (chan in channels)
						push(radio.channels['b' + bw], chan);
			}

			break;
		}
		if (radio.channel)
			wifi[data.config.band] = radio;
	}
	return wifi;
}

function add_mac(stations, mac) {
	stations[mac] ??= {
		mac,
	};
}

function network_interfaces() {
	let ifaces = ubus.call('network.interface', 'dump');
	l3_devices = {};

	for (let iface in ifaces.interface) {
		if (iface.interface in ['main', 'guest', 'uplink'])
			l3_devices[iface.l3_device] = iface.interface;
	}
}

function arp(stations) {
	let neighs = rtnl.request(rtnl.const.RTM_GETNEIGH, rtnl.const.NLM_F_DUMP, {});

	for (let neigh in neighs) {
		if (!neigh.lladdr)
			continue;
		let mac = uc(neigh.lladdr);
		if (check_mac(mac))
			continue;
		add_mac(stations, mac);

		if (l3_devices[neigh.dev])
			stations[mac].network = l3_devices[neigh.dev];

		if (neigh.state == rtnl.const.REACHABLE)
			stations[mac].online = true;
		else if (neigh.cacheinfo.confirmed < 60 * 1000)
			stations[mac].online = true;
		switch(neigh.family) {
		case rtnl.const.AF_INET:
			stations[mac].ipv4 = neigh.dst;
			break;
		case rtnl.const.AF_INET6:
			stations[mac].ipv6 ??= [];
			push(stations[mac].ipv6, neigh.dst);
			break;
		}
	}
}

function assoc_list(stations) {
	let clients = ubus.call('rrm', 'get_clients');

	for (let mac, client in clients) {
		mac = uc(mac);
		add_mac(stations, mac);
		stations[mac].network = client.network;
		delete client.network;
		stations[mac].wifi = client;
	}
}

function fingerprint(stations) {
	for (let mac, fingerprint in fingerprints) {
		mac = uc(mac);
		if (!stations[mac])
			continue;
		stations[mac].fingerprint = fingerprint;
		if (fingerprint.device_name || fingerprint.device)
			stations[mac].hostname = fingerprint.device_name || fingerprint.device;
	}
}

function dhcp_leases(stations) {
	let static = {
		lan: cli.call(['edit', 'interface', 'main', 'ipv4', 'list', 'dhcp-lease']).data,
		guest: cli.call(['edit', 'interface', 'guest', 'ipv4', 'list', 'dhcp-lease']).data,
	};

	let leases = readfile('/tmp/dhcp.leases');
	let lines = split(leases, '\n');

	for (let line in lines) {
		let values = split(line, ' ');
		if (length(values) != 5)
			continue;
		
		let mac = uc(values[1]);

		add_mac(stations, mac);
		stations[mac].ipv4 = values[2];
		stations[mac].dhcp = (mac in static[stations[mac].network]) ? 'static' : 'dynamic';
		if (values[3] != '*')
			stations[mac].hostname ??= values[3];
	}
}

function nlbwmon(stations) {
	let pipe = popen('nlbw -c show -c json');
	let data = json(pipe.read('all') || '{}');
	pipe.close();
	if (!data?.data)
		return;
	data = data.data;
	for (let traffic in data) {
		let mac = uc(traffic[3]);
		if (!stations[mac])
			continue;
		let type = traffic[10] || 'unknown';
		stations[mac].bytes ??= 0;
		stations[mac].traffic ??= {};
		stations[mac].traffic[type] ??= { bytes: 0 };
		stations[mac].traffic[type].bytes += traffic[6] + traffic[8];
		stations[mac].bytes += traffic[6] + traffic[8];
	}
}

function lookup_devices() {
	let stations = {};
	pending = true;
	network_interfaces();
	arp(stations);

	assoc_list(stations);
	fingerprint(stations);
	dhcp_leases(stations);
	nlbwmon(stations);

	let devices = {};

	for (let mac, station in stations) {
		if (!station?.network)
			continue;
		devices[station.network] ??= {};
		devices[station.network][lc(station.hostname || mac)] = station;
		station.mac = mac;
		if (station.network)
			delete station.network;
	}

	return devices;
}

function update_fingerprint() {
	fingerprints = ubus.call('fingerprint', 'fingerprint');
}

function update_devices_db() {
	let devices = lookup_devices();
	for (let k, v in devices.main) {
		let mac = lc(v.mac);
		if (!(mac in devices_db) ||
		    (length(devices_db[mac]?.fingerprint) < length(v.fingerprint)) ||
		    (!devices_db[mac]?.hostname && v.hostname)) {
			if (!devices_db[mac])
				devices_db[mac] = {
					created: time(),
					mac,
				};
			if (length(v.fingerprint))
				devices_db[mac].fingerprint = v.fingerprint;
			if (v.hostname)
				devices_db[mac].hostname = v.hostname;
			writefile('/etc/uconfig/devices/' + mac, devices_db[mac]);
		}
	}
	for (let k, v in devices_db) {
		if (lc(v.hostname) in devices.main) {
			devices.main[lc(v.hostname)].created = v.created;
			continue;
		}
		if (lc(v.mac) in devices.main) {
			devices.main[lc(v.mac)].created = v.created;
			continue;
		}
		if (v.hostname || v.mac) {
			let id = lc(v.hostname || v.mac);
			devices.main[id] = {};
			for (let key in [ 'mac', 'fingerprint', 'hostname', 'created' ])
				if (v[key])
					devices.main[id][key] = v[key];
		}
	}

	return devices;
}

function load_devices_db() {
	let files = glob('/etc/uconfig/devices/*');
	for (let name in files) {
		let data = readfile(name);
		if (data)
			data = json(data);
		if (data)
			devices_db[data.mac] = data;
	}
}

function ports(args) {
	let status = ubus.call('network.device', 'status');
	let roles = {};
	let ports;

	if (args.network) {
		ports = readfile(`/tmp/uconfig/ports.${args.network}`);
		if (ports)
			ports = json(ports);
	}

	for (let role in [ 'wan', 'lan' ]) {
		let spec = capabilities.network[role];
		for (let i, ifname in spec) {
			role = uc(role);
			if (ports && !(ifname in ports))
				continue;
			push(roles[role] = roles[role] || [], {
				netdev: ifname,
				index: i,
				carrier: status[ifname].carrier,
				speed: replace(status[ifname].speed, 'F', ''),
				macaddr: status[ifname].macaddr,
				rx_bytes: status[ifname].statistics.rx_bytes,
				tx_bytes: status[ifname].statistics.tx_bytes,
			});
		}
	}

	let rv = {};

	for (let role, ports in roles) {
		switch (length(ports)) {
		case 0:
			break;

		case 1:
			rv[role] = ports[0];
			break;

		default:
			map(sort(ports, (a, b) => (a.index - b.index)), (port, i) => {
				rv[role + (i + 1)] = port;
			});
		}
	}
	return rv;
}

let ubus_methods = {
	devices: {
		call: function(req) {
			if (req.args.arp)
				arp_discover();
			return update_devices_db();
		},
		args: {
			arp: true
		}
	},
	ports: {
		call: function(req) {
			return ports(req.args);
		},
		args: {
			network: '',
		}
	},
	radios: {
		call: function(req) {
			return radios();
		},
		args: {
		}
	},
	fingerprint_update: {
		call: function(req) {
			update_fingerprint();
			return 0;
		},
		args: {
		}
	},
	traffic: {
		call: function() {
			return {
				up: wan_traffic.up,
				down: wan_traffic.down,
			};
		},
		args: {
		}
	},
};

for (let i = 0; i < 12; i++) {
	push(wan_traffic.up, 0);
	push(wan_traffic.down, 0);
}

load_devices_db();

uloop.init();
ubus.publish('state', ubus_methods);
let update_fingerprintInterval;
update_fingerprintInterval = uloop.interval(5 * 60 * 1000, () => {
	update_fingerprint();
	update_devices_db();
});

uloop.interval(10 * 1000, () => {
	traffic();
});

uloop.run();
uloop.done();
