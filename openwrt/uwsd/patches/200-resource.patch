--- a/script.c
+++ b/script.c
@@ -46,6 +46,13 @@
 
 static LIST_HEAD(requests);
 
+enum {
+	CONN_RES_DATA,
+	CONN_RES_REQ,
+	CONN_RES_RECV_FP,
+	__CONN_RES_MAX
+};
+
 typedef enum {
 	UWSD_SCRIPT_DATA_PEER_ADDR,
 	UWSD_SCRIPT_DATA_LOCAL_ADDR,
@@ -99,7 +106,7 @@ typedef struct {
 		uint16_t datalen;
 		uint8_t data[16384];
 	} buf;
-	uc_value_t *req, *hdr, *conn, *data, *subproto;
+	uc_value_t *req, *hdr, *conn, *subproto;
 	uc_value_t *recv_fp;
 	struct {
 		uwsd_ws_msg_format_t format;
@@ -297,17 +304,12 @@ script_conn_ws_handshake(script_connecti
 {
 	uc_vm_t *vm = &conn->ctx->vm;
 	uc_value_t *ctx, *protocols = NULL;
-	uc_resource_type_t *conn_type;
 	uc_exception_type_t ex;
 	char *protohdr, *p;
-	size_t plen;
 	void **clp;
-
-	conn_type = ucv_resource_type_lookup(vm, "uwsd.connection");
-	assert(conn_type);
+	size_t plen;
 
 	conn->proto = UWSD_PROTOCOL_WS;
-	conn->conn = uc_resource_new(conn_type, conn);
 
 	if (conn->ctx->onConnect) {
 		protohdr = NULL;
@@ -336,7 +338,7 @@ script_conn_ws_handshake(script_connecti
 		uc_vm_stack_push(vm, ucv_get(conn->conn));
 		uc_vm_stack_push(vm, protocols);
 
-		clp = ucv_resource_dataptr(conn->conn, "uwsd.connection");
+		clp = ucv_resource_data(conn->conn, "uwsd.connection");
 		ex = uc_vm_call(vm, false, 2);
 
 		if (!clp || !*clp) {
@@ -558,18 +560,15 @@ script_conn_close(script_connection_t *c
 			ucv_put(uc_vm_stack_pop(vm));
 	}
 
-	reqptr = ucv_resource_dataptr(conn->conn, NULL);
+	reqptr = ucv_resource_data(conn->conn, NULL);
 
 	if (reqptr)
 		*reqptr = NULL;
 
-	ucv_clear(&conn->req);
-	ucv_clear(&conn->data);
+	ucv_resource_set_no_gc(conn->conn, false);
 	ucv_clear(&conn->subproto);
 	ucv_clear(&conn->conn);
 
-	ucv_clear(&conn->recv_fp);
-
 	uloop_fd_delete(&conn->ufd);
 	list_del(&conn->list);
 
@@ -583,19 +582,14 @@ script_conn_close(script_connection_t *c
 static bool
 script_conn_http_request(script_connection_t *conn)
 {
-	uc_resource_type_t *conn_type;
 	uc_vm_t *vm = &conn->ctx->vm;
 	uc_exception_type_t ex;
 	uc_value_t *ctx;
 
-	conn_type = ucv_resource_type_lookup(vm, "uwsd.connection");
-	assert(conn_type);
-
 	ucv_set_constant(conn->req, true);
 	ucv_set_constant(conn->hdr, true);
 
 	conn->proto = UWSD_PROTOCOL_HTTP;
-	conn->conn = uc_resource_new(conn_type, conn);
 
 	if (conn->ctx->onRequest) {
 		uc_vm_stack_push(vm, ucv_get(conn->ctx->onRequest));
@@ -807,19 +801,26 @@ script_conn_http_body(script_connection_
 
 /* -- ucode resource methods --------------------------- */
 
+static script_connection_t *
+uc_fn_conn(uc_vm_t *vm)
+{
+	script_connection_t **ptr = uc_fn_thisval("uwsd.connection");
+	return *ptr;
+}
+
 static uc_value_t *
 uc_script_accept(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 	uc_value_t *proto = uc_fn_arg(0);
 
-	if (!conn || !*conn || (*conn)->proto != UWSD_PROTOCOL_WS)
+	if (!conn || conn->proto != UWSD_PROTOCOL_WS)
 		return NULL;
 
 	if (proto && ucv_type(proto) != UC_STRING)
 		return NULL;
 
-	(*conn)->subproto = proto ? ucv_get(proto) : ucv_boolean_new(true);
+	conn->subproto = proto ? ucv_get(proto) : ucv_boolean_new(true);
 
 	return ucv_boolean_new(true);
 }
@@ -827,13 +828,13 @@ uc_script_accept(uc_vm_t *vm, size_t nar
 static uc_value_t *
 uc_script_expect(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 	uc_value_t *format = uc_fn_arg(0);
 	uc_value_t *limit = uc_fn_arg(1);
 	uwsd_ws_msg_format_t fmt;
 	size_t lim;
 
-	if (!conn || !*conn || (*conn)->proto != UWSD_PROTOCOL_WS)
+	if (!conn || conn->proto != UWSD_PROTOCOL_WS)
 		return NULL;
 
 	if (ucv_type(format) != UC_STRING)
@@ -858,10 +859,10 @@ uc_script_expect(uc_vm_t *vm, size_t nar
 		return NULL;
 	}
 
-	script_conn_reset_reassembly(*conn);
+	script_conn_reset_reassembly(conn);
 
-	(*conn)->reassembly.format = fmt;
-	(*conn)->reassembly.limit = lim;
+	conn->reassembly.format = fmt;
+	conn->reassembly.limit = lim;
 
 	return ucv_boolean_new(true);
 }
@@ -869,32 +870,30 @@ uc_script_expect(uc_vm_t *vm, size_t nar
 static uc_value_t *
 uc_script_data(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 	uc_value_t *set = uc_fn_arg(0);
 
-	if (!conn || !*conn)
+	if (!conn)
 		return NULL;
 
 	if (nargs) {
-		ucv_get(set);
-		ucv_put((*conn)->data);
-		(*conn)->data = set;
+		ucv_resource_value_set(conn->conn, CONN_RES_DATA, ucv_get(set));
 
 		return ucv_get(set);
 	}
 
-	return ucv_get((*conn)->data);
+	return ucv_get(ucv_resource_value_get(conn->conn, CONN_RES_DATA));
 }
 
 static uc_value_t *
 uc_script_send(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 	uc_value_t *data = uc_fn_arg(0);
 	ssize_t n, wlen;
 	char *p;
 
-	if (!conn || !*conn)
+	if (!conn)
 		return NULL;
 
 	if (ucv_type(data) != UC_STRING)
@@ -903,16 +902,16 @@ uc_script_send(uc_vm_t *vm, size_t nargs
 	p = ucv_string_get(data);
 	n = ucv_string_length(data);
 
-	if ((*conn)->proto == UWSD_PROTOCOL_WS) {
-		if ((*conn)->state != STATE_WS)
+	if (conn->proto == UWSD_PROTOCOL_WS) {
+		if (conn->state != STATE_WS)
 			return NULL;
 
-		if (!ws_frame_send(*conn, OPCODE_TEXT, p, n))
+		if (!ws_frame_send(conn, OPCODE_TEXT, p, n))
 			return ucv_boolean_new(false);
 	}
 	else {
 		while (n) {
-			wlen = write((*conn)->ufd.fd, p, ssize_t_min(n, 16384));
+			wlen = write(conn->ufd.fd, p, ssize_t_min(n, 16384));
 
 			if (wlen == -1) {
 				if (errno == EINTR)
@@ -933,20 +932,20 @@ uc_script_send(uc_vm_t *vm, size_t nargs
 static uc_value_t *
 uc_script_close(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t *connp, **conn = uc_fn_this("uwsd.connection");
+	script_connection_t **connp = uc_fn_thisval("uwsd.connection");
+	script_connection_t *conn = *connp;
 	uc_value_t *rcode = uc_fn_arg(0);
 	uc_value_t *rmsg = uc_fn_arg(1);
 
-	if (!conn || !*conn || (*conn)->proto != UWSD_PROTOCOL_WS)
+	if (!conn || conn->proto != UWSD_PROTOCOL_WS)
 		return NULL;
 
 	if (ucv_type(rcode) != UC_INTEGER || ucv_type(rmsg) != UC_STRING)
 		return NULL;
 
-	connp = *conn;
-	*conn = NULL;
+	*connp = NULL;
 
-	ws_error_send(connp, false, ucv_uint64_get(rcode), "%s", ucv_string_get(rmsg));
+	ws_error_send(conn, false, ucv_uint64_get(rcode), "%s", ucv_string_get(rmsg));
 
 	return ucv_boolean_new(true);
 }
@@ -954,12 +953,12 @@ uc_script_close(uc_vm_t *vm, size_t narg
 static uc_value_t *
 uc_script_get_common(uc_vm_t *vm, size_t nargs, const char *field)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 
-	if (!conn || !*conn)
+	if (!conn)
 		return NULL;
 
-	return ucv_get(ucv_object_get((*conn)->req, field, NULL));
+	return ucv_get(ucv_object_get(conn->req, field, NULL));
 }
 
 static uc_value_t *
@@ -983,19 +982,19 @@ uc_script_request_uri(uc_vm_t *vm, size_
 static uc_value_t *
 uc_script_request_header(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 	uc_value_t *name = uc_fn_arg(0);
 
-	if (!conn || !*conn)
+	if (!conn)
 		return NULL;
 
 	if (name && ucv_type(name) != UC_STRING)
 		return NULL;
 
 	if (!name)
-		return ucv_get((*conn)->hdr);
+		return ucv_get(conn->hdr);
 
-	ucv_object_foreach((*conn)->hdr, hname, hvalue)
+	ucv_object_foreach(conn->hdr, hname, hvalue)
 		if (!strcasecmp(hname, ucv_string_get(name)))
 			return ucv_get(hvalue);
 
@@ -1005,7 +1004,7 @@ uc_script_request_header(uc_vm_t *vm, si
 static uc_value_t *
 uc_script_request_info(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 	uc_value_t *rv, *v;
 	size_t i;
 
@@ -1015,13 +1014,13 @@ uc_script_request_info(uc_vm_t *vm, size
 		"ssl", "ssl_cipher", "x509_peer_issuer", "x509_peer_subject"
 	};
 
-	if (!conn || !*conn)
+	if (!conn)
 		return NULL;
 
 	rv = ucv_object_new(vm);
 
 	for (i = 0; i < ARRAY_SIZE(fields); i++) {
-		v = ucv_object_get((*conn)->req, fields[i], NULL);
+		v = ucv_object_get(conn->req, fields[i], NULL);
 
 		if (v)
 			ucv_object_add(rv, fields[i], ucv_get(v));
@@ -1035,10 +1034,13 @@ uc_script_request_info(uc_vm_t *vm, size
 static uc_value_t *
 uc_script_store(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t *conn = uc_fn_conn(vm);
 	uc_value_t *handle = uc_fn_arg(0);
 	uc_value_t *fp = uv_to_handle(vm, handle);
 
+	if (!conn)
+		return NULL;
+
 	if (!fp) {
 		if (vm->exception.type == EXCEPTION_NONE) {
 			char *s = ucv_to_string(vm, handle);
@@ -1052,9 +1054,8 @@ uc_script_store(uc_vm_t *vm, size_t narg
 		return NULL;
 	}
 
-	ucv_put((*conn)->recv_fp);
-
-	(*conn)->recv_fp = fp;
+	ucv_resource_value_set(conn->conn, CONN_RES_RECV_FP, fp);
+	conn->recv_fp = fp;
 
 	return ucv_boolean_new(true);
 }
@@ -1146,7 +1147,8 @@ copy_writev(int in_fd, script_connection
 static uc_value_t *
 uc_script_reply(uc_vm_t *vm, size_t nargs)
 {
-	script_connection_t **conn = uc_fn_this("uwsd.connection");
+	script_connection_t **connp = uc_fn_thisval("uwsd.connection");
+	script_connection_t *conn = *connp;
 	uc_stringbuf_t *buf = xprintbuf_new();
 	uc_value_t *header = uc_fn_arg(0);
 	uc_value_t *body = uc_fn_arg(1);
@@ -1157,7 +1159,7 @@ uc_script_reply(uc_vm_t *vm, size_t narg
 	bool found;
 	char *p;
 
-	if (!conn || !*conn || ((*conn)->proto == UWSD_PROTOCOL_WS && (*conn)->subproto != NULL))
+	if (!conn || (conn->proto == UWSD_PROTOCOL_WS && conn->subproto != NULL))
 		return NULL;
 
 	v = ucv_object_get(header, "Status", NULL);
@@ -1174,7 +1176,7 @@ uc_script_reply(uc_vm_t *vm, size_t narg
 	}
 
 	sprintbuf(buf, "HTTP/%.1f %03hu %s\r\n",
-		ucv_double_get(ucv_object_get((*conn)->req, "http_version", NULL)),
+		ucv_double_get(ucv_object_get(conn->req, "http_version", NULL)),
 		status, reason);
 
 	ucv_object_foreach(header, name, value) {
@@ -1227,7 +1229,7 @@ uc_script_reply(uc_vm_t *vm, size_t narg
 	}
 
 	for (p = buf->buf, n = printbuf_length(buf); n > 0; ) {
-		wlen = write((*conn)->ufd.fd, p, ssize_t_min(n, 16384));
+		wlen = write(conn->ufd.fd, p, ssize_t_min(n, 16384));
 
 		if (wlen == -1) {
 			if (errno == EINTR)
@@ -1250,15 +1252,15 @@ uc_script_reply(uc_vm_t *vm, size_t narg
 			ssize_t copied;
 
 			if (handle_len > -1)
-				copied = copy_sendfile(fd, *conn, handle_len);
+				copied = copy_sendfile(fd, conn, handle_len);
 			else
 				copied = -1, errno = ENOSYS;
 
 			if (copied == -1 && (errno == ENOSYS || errno == EINVAL))
-				copied = copy_splice(fd, *conn);
+				copied = copy_splice(fd, conn);
 
 			if (copied == -1 && errno == EINVAL)
-				copied = copy_writev(fd, *conn);
+				copied = copy_writev(fd, conn);
 
 			if (copied == -1)
 				uc_vm_raise_exception(vm, EXCEPTION_RUNTIME, "send error: %m");
@@ -1267,7 +1269,7 @@ uc_script_reply(uc_vm_t *vm, size_t narg
 		ucv_put(handle);
 	}
 
-	*conn = NULL;
+	*connp = NULL;
 
 	return ucv_boolean_new(!n);
 }
@@ -2012,6 +2014,7 @@ handle_client(struct uloop_fd *ufd, unsi
 {
 	script_context_t *ctx = container_of(ufd, script_context_t, ufd);
 	script_connection_t *conn;
+	void **rdata;
 	char *s;
 	int fd;
 
@@ -2027,8 +2030,12 @@ handle_client(struct uloop_fd *ufd, unsi
 		fprintf(stderr, "Failed to apply FD_CLOEXEC to descriptor: %m\n");
 
 	conn = xalloc(sizeof(*conn));
+	conn->conn = ucv_resource_create_ex(&ctx->vm, "uwsd.connection", (void **)&rdata, __CONN_RES_MAX, sizeof(*rdata));
+	ucv_resource_set_no_gc(conn->conn, true);
+	*rdata = conn;
 	conn->ctx = ctx;
 	conn->req = ucv_object_new(&ctx->vm);
+	ucv_resource_value_set(conn->conn, CONN_RES_REQ, conn->req);
 	conn->ufd.fd = fd;
 	conn->ufd.cb = handle_request;
 
@@ -2143,6 +2150,7 @@ script_context_run(const char *sockpath,
 	case STATUS_OK:
 		uc_type_declare(&ctx.vm, "uwsd.connection", conn_fns, close_conn);
 		uc_type_declare(&ctx.vm, "uwsd.spawn", spawn_fns, close_spawn);
+		uc_vm_registry_set(&ctx.vm, "uwsd.cb", ucv_get(result));
 
 		ctx.onConnect = ucv_get(ucv_array_get(result, 0));
 		ctx.onData    = ucv_get(ucv_array_get(result, 1));
